// squares.v

// Generated using ACDS version 19.1 670

`timescale 1 ps / 1 ps
module squares (
		input  wire        clk_clk,             //          clk.clk
		output wire [9:0]  lights_leds,         //       lights.leds
		output wire [41:0] lights_hex,          //             .hex
		output wire        pll_0_locked_export, // pll_0_locked.export
		input  wire        ps2_ps2_clk,         //          ps2.ps2_clk
		input  wire        ps2_ps2_data,        //             .ps2_data
		input  wire        reset_reset_n,       //        reset.reset_n
		output wire        vga_CLK,             //          vga.CLK
		output wire        vga_HS,              //             .HS
		output wire        vga_VS,              //             .VS
		output wire        vga_BLANK,           //             .BLANK
		output wire        vga_SYNC,            //             .SYNC
		output wire [7:0]  vga_R,               //             .R
		output wire [7:0]  vga_G,               //             .G
		output wire [7:0]  vga_B                //             .B
	);

	wire         coordinator_0_avalon_streaming_source_valid;         // coordinator_0:avalon_streaming_source_valid -> video_vga_controller_0:valid
	wire  [29:0] coordinator_0_avalon_streaming_source_data;          // coordinator_0:avalon_streaming_source_data -> video_vga_controller_0:data
	wire         coordinator_0_avalon_streaming_source_ready;         // video_vga_controller_0:ready -> coordinator_0:avalon_streaming_source_ready
	wire         coordinator_0_avalon_streaming_source_startofpacket; // coordinator_0:avalon_streaming_source_startofpacket -> video_vga_controller_0:startofpacket
	wire         coordinator_0_avalon_streaming_source_endofpacket;   // coordinator_0:avalon_streaming_source_endofpacket -> video_vga_controller_0:endofpacket
	wire         pll_0_outclk0_clk;                                   // pll_0:outclk_0 -> coordinator_0:clock_25_clk
	wire         video_pll_0_vga_clk_clk;                             // video_pll_0:vga_clk_clk -> [coordinator_0:clock_clk, rst_controller:clk, video_vga_controller_0:clk]
	wire  [15:0] coordinator_0_avalon_master_readdata;                // mm_interconnect_0:coordinator_0_avalon_master_readdata -> coordinator_0:avalon_master_readdata
	wire         coordinator_0_avalon_master_waitrequest;             // mm_interconnect_0:coordinator_0_avalon_master_waitrequest -> coordinator_0:avalon_master_waitrequest
	wire   [9:0] coordinator_0_avalon_master_address;                 // coordinator_0:avalon_master_address -> mm_interconnect_0:coordinator_0_avalon_master_address
	wire         coordinator_0_avalon_master_read;                    // coordinator_0:avalon_master_read -> mm_interconnect_0:coordinator_0_avalon_master_read
	wire         coordinator_0_avalon_master_write;                   // coordinator_0:avalon_master_write -> mm_interconnect_0:coordinator_0_avalon_master_write
	wire  [15:0] coordinator_0_avalon_master_writedata;               // coordinator_0:avalon_master_writedata -> mm_interconnect_0:coordinator_0_avalon_master_writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;    // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [15:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;      // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire   [8:0] mm_interconnect_0_onchip_memory2_0_s1_address;       // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [1:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;    // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;         // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [15:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;     // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;         // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         rst_controller_reset_out_reset;                      // rst_controller:reset_out -> [coordinator_0:reset_reset, video_vga_controller_0:reset]
	wire         rst_controller_001_reset_out_reset;                  // rst_controller_001:reset_out -> [mm_interconnect_0:coordinator_0_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset]

	coordinator coordinator_0 (
		.avalon_streaming_source_data          (coordinator_0_avalon_streaming_source_data),          // avalon_streaming_source.data
		.avalon_streaming_source_valid         (coordinator_0_avalon_streaming_source_valid),         //                        .valid
		.avalon_streaming_source_ready         (coordinator_0_avalon_streaming_source_ready),         //                        .ready
		.avalon_streaming_source_startofpacket (coordinator_0_avalon_streaming_source_startofpacket), //                        .startofpacket
		.avalon_streaming_source_endofpacket   (coordinator_0_avalon_streaming_source_endofpacket),   //                        .endofpacket
		.clock_clk                             (video_pll_0_vga_clk_clk),                             //                   clock.clk
		.reset_reset                           (rst_controller_reset_out_reset),                      //                   reset.reset
		.conduit_end_clk                       (ps2_ps2_clk),                                         //             conduit_end.ps2_clk
		.conduit_end_data                      (ps2_ps2_data),                                        //                        .ps2_data
		.clock_50_clk                          (clk_clk),                                             //                clock_50.clk
		.leds                                  (lights_leds),                                         //                  lights.leds
		.hex                                   (lights_hex),                                          //                        .hex
		.clock_25_clk                          (pll_0_outclk0_clk),                                   //                clock_25.clk
		.avalon_master_address                 (coordinator_0_avalon_master_address),                 //           avalon_master.address
		.avalon_master_read                    (coordinator_0_avalon_master_read),                    //                        .read
		.avalon_master_readdata                (coordinator_0_avalon_master_readdata),                //                        .readdata
		.avalon_master_write                   (coordinator_0_avalon_master_write),                   //                        .write
		.avalon_master_writedata               (coordinator_0_avalon_master_writedata),               //                        .writedata
		.avalon_master_waitrequest             (coordinator_0_avalon_master_waitrequest)              //                        .waitrequest
	);

	squares_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_clk),                                          //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),               // reset1.reset
		.reset_req  (1'b0),                                             // (terminated)
		.freeze     (1'b0)                                              // (terminated)
	);

	squares_pll_0 pll_0 (
		.refclk   (clk_clk),             //  refclk.clk
		.rst      (~reset_reset_n),      //   reset.reset
		.outclk_0 (pll_0_outclk0_clk),   // outclk0.clk
		.locked   (pll_0_locked_export)  //  locked.export
	);

	squares_video_pll_0 video_pll_0 (
		.ref_clk_clk        (clk_clk),                 //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),          //    ref_reset.reset
		.vga_clk_clk        (video_pll_0_vga_clk_clk), //      vga_clk.clk
		.reset_source_reset ()                         // reset_source.reset
	);

	squares_video_vga_controller_0 video_vga_controller_0 (
		.clk           (video_pll_0_vga_clk_clk),                             //                clk.clk
		.reset         (rst_controller_reset_out_reset),                      //              reset.reset
		.data          (coordinator_0_avalon_streaming_source_data),          //    avalon_vga_sink.data
		.startofpacket (coordinator_0_avalon_streaming_source_startofpacket), //                   .startofpacket
		.endofpacket   (coordinator_0_avalon_streaming_source_endofpacket),   //                   .endofpacket
		.valid         (coordinator_0_avalon_streaming_source_valid),         //                   .valid
		.ready         (coordinator_0_avalon_streaming_source_ready),         //                   .ready
		.VGA_CLK       (vga_CLK),                                             // external_interface.export
		.VGA_HS        (vga_HS),                                              //                   .export
		.VGA_VS        (vga_VS),                                              //                   .export
		.VGA_BLANK     (vga_BLANK),                                           //                   .export
		.VGA_SYNC      (vga_SYNC),                                            //                   .export
		.VGA_R         (vga_R),                                               //                   .export
		.VGA_G         (vga_G),                                               //                   .export
		.VGA_B         (vga_B)                                                //                   .export
	);

	squares_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                   (clk_clk),                                          //                                 clk_0_clk.clk
		.coordinator_0_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),               // coordinator_0_reset_reset_bridge_in_reset.reset
		.coordinator_0_avalon_master_address             (coordinator_0_avalon_master_address),              //               coordinator_0_avalon_master.address
		.coordinator_0_avalon_master_waitrequest         (coordinator_0_avalon_master_waitrequest),          //                                          .waitrequest
		.coordinator_0_avalon_master_read                (coordinator_0_avalon_master_read),                 //                                          .read
		.coordinator_0_avalon_master_readdata            (coordinator_0_avalon_master_readdata),             //                                          .readdata
		.coordinator_0_avalon_master_write               (coordinator_0_avalon_master_write),                //                                          .write
		.coordinator_0_avalon_master_writedata           (coordinator_0_avalon_master_writedata),            //                                          .writedata
		.onchip_memory2_0_s1_address                     (mm_interconnect_0_onchip_memory2_0_s1_address),    //                       onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                       (mm_interconnect_0_onchip_memory2_0_s1_write),      //                                          .write
		.onchip_memory2_0_s1_readdata                    (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //                                          .readdata
		.onchip_memory2_0_s1_writedata                   (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //                                          .writedata
		.onchip_memory2_0_s1_byteenable                  (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //                                          .byteenable
		.onchip_memory2_0_s1_chipselect                  (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //                                          .chipselect
		.onchip_memory2_0_s1_clken                       (mm_interconnect_0_onchip_memory2_0_s1_clken)       //                                          .clken
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                 // reset_in0.reset
		.clk            (video_pll_0_vga_clk_clk),        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
